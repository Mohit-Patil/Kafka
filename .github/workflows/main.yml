- name: Liquibase Generate Changelog Action
  # You may pin to the exact commit or the version.
  # uses: liquibase-github-actions/generate-changelog@b6fa268928f8f22c708a811250b92cca24c6818d
  uses: liquibase-github-actions/generate-changelog@v4.17.2
  with:
    # *required* File to write changelog to
    changelogFile: 
    # Directory to write table data to
    dataOutputDirectory: # optional
    # Types of objects to compare
    diffTypes: # optional
    # The JDBC driver class
    driver: # optional
    # The JDBC driver properties file
    driverPropertiesFile: # optional
    # Objects to exclude from diff
    excludeObjects: # optional
    # If true, the catalog will be included in generated changeSets
    includeCatalog: # optional
    # Objects to include in diff
    includeObjects: # optional
    # If true, the schema will be included in generated changeSets
    includeSchema: # optional
    # Include the tablespace attribute in the changelog
    includeTablespace: # optional
    # Flag to allow overwriting of output changelog file
    overwriteOutputFile: # optional
    # Password to use to connect to the database
    password: # optional
    # Schemas to include in diff
    schemas: # optional
    # *required* The JDBC database connection URL
    url: 
    # Username to use to connect to the database
    username: # optional
    # When generating SQL for createProcedure, should the procedure schema be forced to the default schema if no schemaName attribute is set?
    alwaysOverrideStoredLogicSchema: # optional
    # Should Liquibase automatically include REORG TABLE commands when needed?
    autoReorg: # optional
    # Number of seconds wait between checks to the changelog lock when it is locked
    changelogLockPollRate: # optional
    # Number of minutes to wait for the changelog lock to be available before giving up
    changelogLockWaitTimeInMinutes: # optional
    # Configures how to handle unknown fields in changelog files. Possible values: STRICT which causes parsing to fail, and LAX which continues with the parsing.
    changelogParseMode: # optional
    # Additional classpath entries to use
    classpath: # optional
    # Should Liquibase convert to/from STANDARD data types. Applies to both snapshot and update commands.
    convertDataTypes: # optional
    # Name of table to use for tracking concurrent Liquibase usage
    databaseChangelogLockTableName: # optional
    # Name of table to use for tracking change history
    databaseChangelogTableName: # optional
    # Class to use for Database implementation
    databaseClass: # optional
    # The DDL_LOCK_TIMEOUT parameter indicates the number of seconds a DDL command should wait for the locks to become available before throwing the resource busy error message. This applies only to Oracle databases.
    ddlLockTimeout: # optional
    # Logging level
    defaultloggerLevel: # optional
    # File with default Liquibase properties
    defaultsFile: # optional
    # Should Liquibase compare column order in diff operation?
    diffColumnOrder: # optional
    # How to handle multiple files being found in the search path that have duplicate paths. Options are WARN (log warning and choose one at random) or ERROR (fail current operation)
    duplicateFileMode: # optional
    # Encoding to use when reading files. Valid values include: UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, or OS to use the system configured encoding.
    fileEncoding: # optional
    # DEPRECATED: No longer used
    filterLogMessages: # optional
    # Should Liquibase include a "created" attribute in diff/generateChangelog changesets with the current datetime
    generateChangesetCreatedValues: # optional
    # Should Liquibase include the change description in the id when generating changesets?
    generatedChangesetIdsContainsDescription: # optional
    # Force liquibase to think it has no access to a keyboard
    headless: # optional
    # Liquibase Hub API key for operations
    hubApiKey: # optional
    # Log level for filtering log messages to send to Liquibase Hub during operations. Values can be any acceptable log level.
    hubLogLevel: # optional
    # Content to send to Liquibase Hub during operations. Values can be "all", "meta", or "off"
    hubMode: # optional
    # Liquibase Hub URL for operations
    hubUrl: # optional
    # Should Liquibase include the catalog name when determining equality?
    includeCatalogInSpecification: # optional
    # Include the system classpath when resolving classes at runtime
    includeSystemClasspath: # optional
    # Liquibase Pro or Liquibase Labs license key used to unlock paid capabilities. Get a free trial at https://liquibase.com/trial and use in CLI or add liquibase.licenseKey=<yourKey> into your defaults file.
    licenseKey: # optional
    # Catalog to use for Liquibase objects
    liquibaseCatalogName: # optional
    # Schema to use for Liquibase objects
    liquibaseSchemaName: # optional
    # Tablespace to use for Liquibase objects
    liquibaseTablespaceName: # optional
    # Controls which log channels have their level set by the liquibase.logLevel setting. Comma separate multiple values. To set the level of all channels, use "all". Example: liquibase,org.mariadb.jdbc
    logChannels: # optional
    # 
    logFile: # optional
    # Controls which logs get set to stderr AND to any log file. The CLI defaults, if log file set, to SEVERE. Others vary by integration. The official log levels are: OFF, SEVERE, WARNING, INFO, FINE
    logLevel: # optional
    # How to handle changelog property expressions where a value is not set. For example, a string "${address}" when no "address" property was defined. Values can be: "preserve" which leaves the string as-is, "empty" which replaces it with an empty string, or "error" which stops processing with an error.
    missingPropertyMode: # optional
    # Enable performance tracking. Set to "false" to disable. If set to "true", data is stored to a `liquibase-TIMESTAMP.jfr` file in your working directory. Any other value will enable tracking and be used as the name of the file to write the data to.
    monitorPerformance: # optional
    # Custom executor that can specified
    nativeExecutor: # optional
    # 
    outputFile: # optional
    # Encoding to use when writing files
    outputFileEncoding: # optional
    # Line separator for output
    outputLineSeparator: # optional
    # Should liquibase treat schema and catalog names as case sensitive?
    preserveSchemaCase: # optional
    # DEPRECATED: Liquibase Pro license key used to unlock paid capabilities. Get a free trial at https://www.liquibase.com/protrial and use in CLI or add liquibase.pro.licenseKey=<yourKey> into your defaults file.
    proLicenseKey: # optional
    # If a column would be dropped in a diffChangeLog, call markUnused instead if set to true
    proMarkUnusedNotDrop: # optional
    # If true, generate changeSets with SQL-based changes inlined instead of saving them to an external file
    proSqlInline: # optional
    # If false, do not drop public synonyms in diffChangeLog/dropAll
    proSynonymsDropPublic: # optional
    # Should Liquibase prompt if a non-local database is being accessed
    promptForNonLocalDatabase: # optional
    # Implementation of Properties class to provide additional driver properties
    propertyProviderClass: # optional
    # Complete list of Location(s) to search for files such as changelog files in. Multiple paths can be specified by separating them with commas.
    searchPath: # optional
    # If true, remove functionality from file parsers which could be used insecurely. Examples include (but not limited to) disabling remote XML entity support.
    secureParsing: # optional
    # Should Liquibase commands execute
    shouldRun: # optional
    # Should Liquibase snapshot data by default?
    shouldSnapshotData: # optional
    # If true, show a Liquibase banner on startup.
    showBanner: # optional
    # Level to log SQL statements to
    sqlLogLevel: # optional
    # Be stricter on allowed Liquibase configuration and setup?
    strict: # optional
    # Support escaping changelog parameters using a colon. Example: ${:user.name}
    supportPropertyEscaping: # optional
    # If set to true (default value), createProcedure tags with a set schemaName will modify the procedure body with the given schema name.
    useProcedureSchema: # optional
